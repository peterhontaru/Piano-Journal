# assess if there was a break longer than 31 days while learning a piece
max_break <- raw_data%>%
filter(Genre %notin% c("Other", "Not applicable"))%>%
arrange(Project)%>%
group_by(Project)%>%
summarise(Max_Break = max(Date_End - lag(Date_End), na.rm = TRUE))
# check if we have all the information we need
table_existing_info <- read_csv("table_outline.csv")%>%mutate(Project = as.factor(Project))
# set out model_data table by project (data by each project)
model_data <- raw_data%>%
filter(Genre %notin% c("Other", "Not applicable"))%>%
filter(Completed == "Yes")%>%
droplevels()%>%
group_by(Project, Genre)%>%
summarise(Duration = sum(Duration)/60,
Date_Start = min(Date_Start),
Date_End = max(Date_End),
Days_Practiced = Date_End - Date_Start)%>%
inner_join(table_existing_info, by = "Project")%>%
mutate(ABRSM = as.factor(ABRSM),
Level = as.factor(ifelse(ABRSM %in% c(1,2,3,4), "Beginner",
ifelse(ABRSM %in% c(5,6), "Intermediate", "Advanced"))),
Standard = as.factor(Standard),
Length = Length/60,
Level = fct_relevel(Level, levels = c("Beginner", "Intermediate", "Advanced")),
ABRSM = fct_relevel(ABRSM, levels = c("1", "2", "3", "4", "5", "6", "7", "8")))%>%
inner_join(Practice_by_Date, by = "Date_Start")%>%
inner_join(max_break, by = "Project")%>%
mutate(Break = as.factor(ifelse(Max_Break > 31, "Yes", "No")))
# any projects without the needed info (ie. Difficulty, Length of piece) will be flagged into this file/variable
table_missing_info <- model_data%>%
distinct(Project)%>%
anti_join(table_existing_info, by = "Project")
# they will then be saved into our "alert" file for review
write_csv(table_missing_info, "table_missing_info.csv")
# run the import/clean script
source("global.R")
knitr::opts_chunk$set(
echo = TRUE, # show all of the code
tidy = FALSE, # cleaner code printing
size = "small", # smaller code
fig.path = "figs/",# where the figures will end up
out.width = "100%",
message = FALSE,
warning = FALSE
)
# run the import/clean script
source("global.R")
timeline <- raw_data%>%
group_by(Month_format)%>%
summarise(Total_Duration = sum(Duration)/60)%>%
mutate(Total_Duration2 = as.integer(cumsum(Total_Duration)),
max = as.integer(max(Total_Duration2)),
max = ifelse(max > Total_Duration2, "", max))
ggplot(timeline, aes(Month_format, Total_Duration2, group = 1))+
geom_line(size = 2, color = "#69b3a2")+
geom_point(size = 5, color = "#69b3a2")+
geom_area(alpha = 0.3, fill = "#69b3a2")+
#grade 3
geom_point(x="Oct\n '18", y = 253, size = 5, color = "dark red")+
geom_text(x="Oct\n '18", y = 253+200, size = 5, label = "Grade 3")+
geom_text(x="Oct\n '18", y = 253+100,  size = 5, label = "253 hours")+
#grade 5
geom_point(x="Oct\n '19", y = 675, size = 5, color = "dark red")+
geom_text(x="Oct\n '19", y = 675+200,  size = 5, label = "Grade 5")+
geom_text(x="Oct\n '19", y = 675+100,  size = 5, label = "675 hours")+
#grade 6
geom_point(x="Oct\n '20", y = 1078, size = 5, color = "dark red")+
geom_text(x="Oct\n '20", y = 1078+200,  size = 5, label = "Grade 6")+
geom_text(x="Oct\n '20", y = 1078+100,  size = 5, label = "1078 hours")+
#NOW
geom_point(aes(x="Apr\n '21", y = 1219), size = 5, color = "dark red")+
geom_text(aes(label = max), nudge_y = 75, nudge_x = -0.5, size = 5)+
scale_fill_gradient(low="yellow", high="red")+
labs(x = NULL,
y = "Total hours of practice",
title = "Piano practice timeline")+
theme_ipsum_es()+
theme(legend.position = "top")
raw_data%>%
filter(Date_Start > as.Date("2018/11/01"))%>%
group_by(Project, Date_Start)%>%
summarise(Duration = sum(Duration)/60)%>%
mutate(Cumulative_Piece = cumsum(Duration),
Month_Year = as.factor(as.yearmon(Date_Start)),
Month_format = str_replace(Month_Year, " 20", "\n '"))%>%
ungroup()%>%
mutate(Cumulative_Total = cumsum(Duration))%>%
filter(Project %notin% c("Technique", "General", "Sightreading"))%>%
left_join(model_data%>%select(Level, Project, ABRSM), by = "Project")%>%
ggplot(aes(Date_Start, Cumulative_Piece, fill = Level)) +
geom_point(size = 10, shape = 21, col = "black", alpha = 0.5) +
scale_size(range = c(.1, 16), guide = FALSE) +
#geom_text(aes(x = as.Date("2020-05-01"), y = 40, label = Month_Year), size = 15, color = 'lightgrey', family = 'Oswald') +
labs(title = 'Year: {frame_time}',
y = "Total practice time per piece (hours)")+
scale_color_tron()+
scale_fill_tron()+
theme_ipsum_es() +
theme(legend.position = "top")+
transition_time(Date_Start) +
ease_aes('linear')+
exit_fade() +
shadow_mark(alpha = 0.1, size = 5)
#save animation as gif for later use
anim_save("figs/timeline.gif")
raw_data%>%
filter(Source != "Estimated")%>%
group_by(Month_Year, Month_Start, Month_format)%>%
summarise(Days_Practice = n_distinct(Date_Start),
Total_Duration = sum(Duration, na.rm = TRUE))%>%
mutate(Days_Total = days_in_month(Month_Start),
Days_Not_Practiced = Days_Total - Days_Practice,
Avg_Duration = as.integer(Total_Duration/Days_Total),
Consistency = round(Days_Practice / Days_Total * 100,2),
Consistency_Status = ifelse(Consistency<75, "Bad", "Good"),
Month_format = reorder(Month_format, Month_Year))%>%
ggplot(aes(Month_format, Consistency, fill = Consistency_Status))+
geom_col(group = 1, col = "black")+
geom_hline(yintercept = 75, lty = "dashed")+
geom_text(aes(label = Days_Not_Practiced), size = 5, nudge_y = 3)+
labs(x = NULL,
fill = "Consistency status",
subtitle = "Numbers indicate days without any practice within each month")+
scale_color_tron()+
scale_fill_tron()+
theme_ipsum_es()+
theme(legend.position = "top")
raw_data%>%
filter(Source != "Estimated")%>%
group_by(Month_Year, Month_Start, Month_format)%>%
summarise(Days_Practice = n_distinct(Date_Start),
Total_Duration = sum(Duration))%>%
mutate(Days_Total = days_in_month(Month_Start),
Avg_Duration = as.integer(Total_Duration/Days_Total),
Avg_Duration_Status = ifelse(Avg_Duration < 60, "Less than one hour", "One hour"),
Month_format = reorder(Month_format, Month_Year))%>%
ggplot(aes(Month_format, Avg_Duration, fill = Avg_Duration_Status))+
geom_col(col = "black")+
labs(x = NULL,
y = "Average practice session length (min)",
fill = "Status")+
geom_text(aes(label = Avg_Duration), nudge_y = 5, size = 5)+
scale_color_tron()+
scale_fill_tron()+
theme_ipsum_es()+
theme(legend.position = "top",
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
raw_data%>%
group_by(Month_Year, Month_Start, Month_format, Month_Name, Year)%>%
summarise(Days_Practice = n_distinct(Date_Start),
Total_Duration = sum(Duration))%>%
mutate(Days_Total = days_in_month(Month_Start),
Avg_Duration = as.integer(Total_Duration/Days_Total),
Avg_Duration_Status = ifelse(Avg_Duration < 60, "Less than one hour", "One hour"),
Month_format = reorder(Month_format, Month_Year),
size = as.factor(ifelse(Year == 2018, 1, 1.5)),
label = ifelse(month(Month_Start) == 1, as.character(Year), ""))%>%
ggplot(aes(Month_Name, Avg_Duration, group = Year, size = size))+
geom_line(aes(col = Year))+
geom_label_repel(aes(label = label, col = Year))+
labs(x = NULL,
fill = "Status")+
scale_color_tron()+
scale_fill_tron()+
theme_ipsum_es()+
theme(legend.position = "none")
covid_start <- as.Date("2020/03/23")
inference <- raw_data%>%
filter(Source != "Estimated")%>%
mutate(Covid_Status = as.factor(ifelse(Date_Start < covid_start, "Before COVID", "After COVID")),
Covid_Status = reorder(Covid_Status, desc(Covid_Status)))%>%
group_by(Covid_Status, Date_Start)%>%
summarise(Duration = sum(Duration))%>%
ungroup()
ggplot(inference, aes(Covid_Status, Duration, fill = Covid_Status))+
geom_boxplot(varwidth = TRUE, col = "black")+
labs(x = NULL,
y = "Average practice session (min)")+
scale_color_tron()+
scale_fill_tron()+
theme_ipsum_es()+
theme(legend.position = "none")
inference %>%
select(Covid_Status, Duration) %>%
group_by(group = as.character(Covid_Status)) %>%
do(tidy(shapiro.test(.$Duration)))%>%
kbl(caption = "Shapiro-Wilk normality test")%>%
kable_paper("hover", full_width = F)
tidy(leveneTest(inference$Duration~inference$Covid_Status))%>%
kbl(caption = "Levene's test")%>%
kable_paper("hover", full_width = F)
t_test <- inference%>%
t_test(Duration ~ Covid_Status, var.equal = TRUE)%>%
add_significance()%>%
kbl()%>%
kable_paper("hover", full_width = F)
t_test
#write these as a function
#remove axis
raw_data%>%
group_by(Genre)%>%
summarise(Duration = as.integer(sum(Duration)/60))%>%
mutate(Genre = reorder(Genre, Duration))%>%
arrange(desc(Duration))%>%
filter(Genre %notin% c("Other", "Not applicable"))%>%
head(10)%>%
ggplot(aes(Genre, Duration, fill = Duration))+
geom_col(show.legend = FALSE, col = "black", width = 1)+
geom_text(aes(label = Duration), show.legend = FALSE, nudge_y = 25, size = 5)+
scale_fill_gradient(low="yellow", high="red")+
labs(x = NULL,
y = "Total hours of practice")+
coord_flip()+
theme_ipsum_es()+
theme(axis.text.x = element_blank(),
axis.ticks = element_blank())
raw_data%>%
filter(Composer != "Not applicable")%>%
group_by(Composer)%>%
summarise(Duration = as.integer(sum(Duration)/60))%>%
mutate(Composer = reorder(Composer, Duration))%>%
arrange(desc(Duration))%>%
head(10)%>%
ggplot(aes(Composer, Duration, fill = Duration))+
geom_col(show.legend = FALSE, col = "black", width = 1)+
geom_text(aes(label = Duration), show.legend = FALSE, nudge_y = 6)+
scale_fill_gradient(low="yellow", high="red")+
labs(x = NULL,
y = "Total hours of practice")+
coord_flip()+
theme_ipsum_es()+
theme(axis.text.x = element_blank(),
axis.ticks = element_blank())
raw_data%>%
group_by(Project)%>%
summarise(Duration = as.integer(sum(Duration)/60))%>%
mutate(Project = reorder(Project, Duration))%>%
arrange(desc(Duration))%>%
filter(Project %notin% c("Technique", "General", "Sightreading"))%>%
head(15)%>%
ggplot(aes(Project, Duration, fill = Duration))+
geom_col(show.legend = FALSE, col = "black", width = 1)+
geom_text(aes(label = Duration), show.legend = FALSE, nudge_y = 2)+
scale_fill_gradient(low="yellow", high="red")+
labs(x = NULL,
y = "Total hours of practice")+
coord_flip()+
theme_ipsum_es()+
theme(axis.text.x = element_blank(),
axis.ticks = element_blank())
model_data%>%
select(-Days_Practiced, -Standard, -Date_End, -Length)%>%
mutate(Duration = round(Duration))%>%
arrange(desc(Date_Start))%>%
rename(`Total Practice Hours` = Cumulative_Duration,
Started = Date_Start)%>%
kbl(escape = FALSE,
caption = "test")%>%
kable_paper(c("hover", "striped"), full_width = F)%>%
column_spec(c(1,3), bold = T, color = "black")%>%
scroll_box(height = "450px")
#colour code columns by difficulty?
model_data%>%
mutate(Duration = Duration)%>%
ggplot(aes(ABRSM, Duration, fill = ABRSM))+
geom_boxplot(varwidth = TRUE, outlier.colour = "red")+
labs(x = "ABRSM Grade",
y = "Total practice hours",
subtitle = "The higher the difficulty, the more time it takes to learn a piece")+
scale_color_tron()+
scale_fill_tron()+
theme_ipsum_es()+
theme(legend.position = "none")
model_data%>%
mutate(Duration = Duration)%>%
ggplot(aes(Level, Duration, fill = Level))+
geom_boxplot(varwidth = TRUE, outlier.colour = "red")+
scale_color_tron()+
scale_fill_tron()+
labs(x = "Level",
y = "Total practice hours",
subtitle = "The higher the difficulty, the more time it takes to learn a piece")+
theme_ipsum_es()+
theme(legend.position = "none")
model_data%>%
ggplot(aes(Length, Duration, group = 1))+
geom_jitter(aes(col = Level), width = 0.5, height = 0.5, size = 3)+
geom_smooth(method = "lm", se=FALSE)+
labs(x = "Piece length (mins)",
y = "Hours needed to learn a piece",
subtitle = "There appears to be a linear trend between piece length and total practice time")+
scale_color_tron()+
scale_fill_tron()+
theme_ipsum_es()+
theme(legend.position = "top")
model_data%>%
ggplot(aes(Cumulative_Duration, Duration, group = 1))+
geom_point(aes(col = Level), size = 3)+
geom_smooth(method = "lm", se=FALSE)+
#facet_wrap(.~ABRSM)+
labs(x = "Cumulative hours practiced before the first practice of each piece",
y = "Hours needed to learn a piece",
subtitle = "Pieces of a similar difficulty become faster to learn")+
scale_color_tron()+
scale_fill_tron()+
theme_ipsum_es()+
theme(legend.position = "top")
model_data%>%
inner_join(max_break, by = "Project")%>%
mutate(Project_formatted = str_replace_all(Project,"[^[:graph:]]", " "),
Project_label = as.factor(ifelse(Max_Break > 31, Project_formatted, "")))%>%
ggplot(aes(as.integer(Max_Break), Duration, col = Max_Break <= 31))+
geom_point(size = 3)+
geom_text_repel(aes(label = Project_label), size = 3, show.legend = FALSE)+
scale_x_log10()+
scale_color_tron(labels = c(TRUE, FALSE))+
guides(colour = guide_legend(reverse=TRUE))+
labs(x = "Maximum days passed between two consecutive sessions on the same piece (log scale)",
y = "Hours needed to learn a piece",
col = "Break (over 1 month)",
subtitle = "Taking a break before finishing a piece might lead to more hours required to learn it")+
theme_ipsum_es()+
theme(legend.position = "top")
model_data%>%
inner_join(max_break, by = "Project")%>%
mutate(Project_formatted = str_replace_all(Project,"[^[:graph:]]", " "),
Project_label = as.factor(ifelse(Max_Break > 31, Project_formatted, "")))%>%
ggplot(aes(as.integer(Max_Break), Duration, col = Max_Break <= 31))+
geom_point(size = 3)+
geom_text_repel(aes(label = Project_label), size = 3, show.legend = FALSE)+
scale_x_log10()+
scale_color_tron(labels = c(TRUE, FALSE))+
guides(colour = guide_legend(reverse=TRUE))+
labs(x = "Maximum days passed between two consecutive sessions on the same piece (log scale)",
y = "Hours needed to learn a piece",
col = "Break (over 1 month)",
subtitle = "Taking a break before finishing a piece might lead to more hours required to learn it")+
theme_ipsum_es()+
theme(legend.position = "top")
model_data%>%
inner_join(max_break, by = "Project")%>%
mutate(Project_formatted = str_replace_all(Project,"[^[:graph:]]", " "),
Project_label = as.factor(ifelse(Max_Break > 31, Project_formatted, "")))
View(max_break)
model_data%>%
inner_join(max_break, by = "Project")
model_data%>%
mutate(Project_formatted = str_replace_all(Project,"[^[:graph:]]", " "),
Project_label = as.factor(ifelse(Max_Break > 31, Project_formatted, "")))%>%
ggplot(aes(as.integer(Max_Break), Duration, col = Max_Break <= 31))+
geom_point(size = 3)+
geom_text_repel(aes(label = Project_label), size = 3, show.legend = FALSE)+
scale_x_log10()+
scale_color_tron(labels = c(TRUE, FALSE))+
guides(colour = guide_legend(reverse=TRUE))+
labs(x = "Maximum days passed between two consecutive sessions on the same piece (log scale)",
y = "Hours needed to learn a piece",
col = "Break (over 1 month)",
subtitle = "Taking a break before finishing a piece might lead to more hours required to learn it")+
theme_ipsum_es()+
theme(legend.position = "top")
model_data <- model_data%>%filter(ABRSM != 7)%>%droplevels()
train.control <- trainControl(method = "boot",
number = 10,
search = "random")
set.seed(123)
# set number of clusters
clusters <- 4
# run them all in parallel
cl <- makeCluster(clusters, type = "SOCK")
# register cluster train in paralel
registerDoSNOW(cl)
# train models
model <- train(Duration ~ ABRSM + Genre + Length + Cumulative_Duration + Break + Standard,
data = model_data,
method = "ranger",
preProcess = c("center", "scale", "BoxCox"),
tuneLength = 100,
trControl = train.control)
model2 <- train(Duration ~ ABRSM + Genre + Length + Cumulative_Duration + Break + Standard,
data = model_data,
method = "lmStepAIC",
preProcess = c("center", "scale", "BoxCox"),
tuneLength = 100,
trControl = train.control)
model3 <- train(Duration ~ ABRSM + Genre + Length + Cumulative_Duration + Break + Standard,
data = model_data,
method = "lm",
preProcess = c("center", "scale", "BoxCox"),
tuneLength = 100,
trControl = train.control)
model4 <- train(Duration ~ ABRSM + Genre + Length + Cumulative_Duration + Break + Standard,
data = model_data,
method = "ridge",
preProcess = c("center", "scale", "BoxCox"),
tuneLength = 100,
trControl = train.control)
model5 <- train(Duration ~ ABRSM + Genre + Length + Cumulative_Duration + Break + Standard,
data = model_data,
method = "rf",
preProcess = c("center", "scale", "BoxCox"),
tuneLength = 100,
trControl = train.control)
model6 <- train(Duration ~ ABRSM + Genre + Length + Cumulative_Duration + Break + Standard,
data = model_data,
method = "gbm",
preProcess = c("center", "scale", "BoxCox"),
tuneLength = 100,
trControl = train.control)
model7 <- train(Duration ~ ABRSM + Genre + Length + Cumulative_Duration + Break + Standard,
data = model_data,
method = "pls",
preProcess = c("center", "scale", "BoxCox"),
tuneLength = 100,
trControl = train.control)
# shut the instances of R down
stopCluster(cl)
# compare models
model_list <- list(one = model, two = model2, three = model3, four = model4, five = model5, six = model6, seven = model7)
model_comparison <- resamples(model_list)
summary(model_comparison)
# Estimate accuracy based on different groups? why does the model perform badly there
# keep LM model for explanation or even RF
# correlation
# learning curves to indicate overfitting and underfitting
# transform days_practiced into something more like 1-2-3 based on 120 days? why is chopin so high
# hyper parameters
# https://topepo.github.io/caret/model-training-and-tuning.html#model-training-and-parameter-tuning
# https://topepo.github.io/caret/random-hyperparameter-search.html
tidy(vif(model3$finalModel))%>%
rename(VIF = x)%>%
mutate(VIF = round(VIF, 1))%>%
arrange(desc(VIF))%>%
kbl(caption = "Variance Inflation Factor (VIF)")%>%
kable_paper("hover", full_width = F)
selected_model <- model7
#Saving the model
saveRDS(selected_model, file = "model.rda")
#get predictions
predictions <- predict(selected_model, model_data)
#create dataset
model_data2 <- model_data
model_data2$Predicted <- predictions
model_data2$Actual <- model_data$Duration
model_data2$Residuals <- model_data2$Actual - model_data2$Predicted
# model_data2 <- model_data%>%
#   mutate(Actual = as.numeric(Duration),
#          Predicted = as.numeric(predictions),
#          Residuals = Actual - Predicted)%>%
#   select(Predicted, Actual, Residuals, Project, Level, Genre)
#visualise predicted vs actual
ggplotly(
ggplot(model_data2, aes(Predicted, Actual, label = Residuals, col = Level))+
geom_point(aes(text = Project))+
geom_smooth(method = "loess", col = "red", lwd = 1, se = FALSE)+
geom_abline(lty = "dashed", lwd = 0.5, col = "gray")+
coord_cartesian(xlim = c(0,50), ylim = c(0,50))+
labs(col = NULL)+
scale_color_tron()+
theme_ipsum_es() +
theme(legend.position = "top")
) %>%
layout(legend = list(
orientation = "h",
x = 0.4, y = 1.2))
ggplot(model_data2, aes(Residuals, fill = ..count..))+
geom_histogram(binwidth = 1, col = "black")+
geom_vline(aes(xintercept=mean(Residuals)), lwd = 1, lty = 2) +
labs(x="Residuals",
y= "Total occurences")+
scale_fill_gradient(low="yellow", high="red")+
theme_ipsum_es()+
theme(legend.position = "none")
ggplotly(
ggplot(model_data2, aes(Actual, Residuals, col = Level, label = Predicted))+
geom_hline(yintercept = 0, size = 3, color = "grey52")+
geom_point(aes(text = Project), alpha = 0.5)+
geom_smooth(method = "loess", col = "red", se = FALSE)+
labs(col = NULL)+
scale_color_tron()+
theme_ipsum_es()
) %>%
layout(legend = list(orientation = "h",x = 0.4, y = 1.2))
tidy(compare_models(model7, model5))%>%
kbl(caption = "Model 1 vs model 2")%>%
kable_paper("hover", full_width = F)
plot(model5, main = "The most optimal model was that with 7 predictors", col = "orange", lwd = 1.5)
imp <- as.matrix(varImp(model5)$importance)%>%
as.data.frame()%>%
rename(Importance = Overall)%>%
mutate(Feature = as.factor(rownames(.)),
Feature = reorder(Feature, Importance))
ggplot(imp, aes(Feature, Importance))+
geom_segment(aes(Feature, y = 0, xend = Feature, yend = Importance), col = "black", size = 1.5) +
geom_point(size = 10, col = "orange")+
geom_text(aes(label = paste(round(Importance), "%", sep = "")), color = "black", size = 3, check_overlap = TRUE)+
scale_color_tron()+
scale_fill_tron()+
theme_ipsum_es()+
coord_flip()+
labs(title = "Variable importance ranking")+
theme(axis.text.x =  element_blank(),
axis.ticks = element_blank())
#plot(varImp(model5))
model_data2 <- model_data %>%
mutate(Predicted = round(predictions,1),
Actual = round(Duration, 1),
Residuals = Actual - Predicted)%>%
select(Predicted, Actual, Residuals, Project, Level, Genre)
runApp()
